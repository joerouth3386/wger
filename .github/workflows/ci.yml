name: Continuous Integration

on:
  push:
    branches: [ master, ]
    paths:
      - '**.py'
      - 'pyproject.toml'
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ master, ]
    paths:
      - '**.py'
      - 'pyproject.toml'

jobs:
  ci-job:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.10', '3.11', '3.12', '3.13' ]
    name: CI job (python ${{ matrix.python-version }})

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Display Python version
        run: python --version

      - name: Install dependencies
        run: |
          uv sync --group dev

      # Only run the tests with coverage for one version of python
      - name: Test the application with coverage
        if: matrix.python-version == 3.13
        run: |
          source .venv/bin/activate
          wger create-settings
          coverage run --source='.' ./manage.py test
          coverage lcov

      - name: Test the application
        if: matrix.python-version != 3.13
        run: |
          source .venv/bin/activate
          wger create-settings
          python manage.py test

      - name: Coveralls
        if: matrix.python-version == 3.13
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: coverage.lcov
name: Continuous Integration

on:
  push:
    branches: [ master ]
    paths:
      - '**.py'
      - 'pyproject.toml'
  pull_request:
    branches: [ master ]
    paths:
      - '**.py'
      - 'pyproject.toml'

jobs:
  ci-job:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.10', '3.11', '3.12', '3.13' ]
    name: CI job (python ${{ matrix.python-version }})

    services:
      postgres:
        image: postgres:14
        ports: ['5432:5432']
        env:
          POSTGRES_DB: testdb
          POSTGRES_USER: testuser
          POSTGRES_PASSWORD: testpass
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    env:
      DJANGO_DB_ENGINE: django.db.backends.postgresql
      DJANGO_DB_DATABASE: testdb
      DJANGO_DB_USER: testuser
      DJANGO_DB_PASSWORD: testpass
      DJANGO_DB_HOST: localhost
      DJANGO_DB_PORT: 5432

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          enable-cache: true

      - name: Display Python version
        run: python --version

      - name: Install dependencies
        run: |
          uv sync --group dev

      - name: Run migrations
        run: |
          source .venv/bin/activate
          python manage.py migrate

      # Only run the tests with coverage for one version of python
      - name: Test the application with coverage
        if: matrix.python-version == 3.13
        run: |
          source .venv/bin/activate
          wger create-settings
          coverage run --source='.' ./manage.py test
          coverage lcov

      - name: Test the application
        if: matrix.python-version != 3.13
        run: |
          source .venv/bin/activate
          wger create-settings
          python manage.py test

      - name: Coveralls
        if: matrix.python-version == 3.13
        uses: coverallsapp/github-action@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          path-to-lcov: coverage.lcov
